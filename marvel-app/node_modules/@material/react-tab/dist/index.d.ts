import React from 'react';
import TabIndicator from '@material/react-tab-indicator';
import { MDCTabFoundation } from '@material/tab/foundation';
import { MDCTabAdapter } from '@material/tab/adapter';
import TabRipple, { TabRippleProps } from './TabRipple';
export interface TabProps extends React.HTMLProps<HTMLButtonElement | HTMLAnchorElement> {
    active?: boolean;
    focusOnActivate?: boolean;
    isFadingIndicator?: boolean;
    indicatorContent?: React.ReactNode;
    minWidth?: boolean;
    isMinWidthIndicator?: boolean;
    stacked?: boolean;
    tag?: 'button' | 'a';
    previousIndicatorClientRect?: ClientRect;
    onInteraction?: () => void;
}
interface MDCTabElementAttributes {
    'aria-selected'?: 'false' | 'true';
    tabIndex?: number;
}
interface TabState extends MDCTabElementAttributes {
    classList: Set<string>;
    activateIndicator: boolean;
    previousIndicatorClientRect?: ClientRect;
}
export default class Tab extends React.Component<TabProps, TabState> {
    foundation: MDCTabFoundation;
    tabRef: React.RefObject<HTMLButtonElement>;
    tabContentRef: React.RefObject<HTMLSpanElement>;
    tabIndicatorRef: React.RefObject<TabIndicator>;
    tabRippleRef: React.RefObject<TabRipple>;
    static defaultProps: Partial<TabProps>;
    state: TabState;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: TabProps): void;
    readonly classes: string;
    readonly adapter: MDCTabAdapter;
    activate(computeIndicatorClientRect?: ClientRect): void;
    deactivate(): void;
    computeIndicatorClientRect: () => ClientRect;
    computeDimensions: () => import("@material/tab/types").MDCTabDimensions;
    focus: () => void;
    onFocus: (e: React.FocusEvent<HTMLButtonElement>) => void;
    onBlur: (e: React.FocusEvent<HTMLButtonElement>) => void;
    render(): JSX.Element;
    renderIndicator(): JSX.Element;
}
export { TabRipple, Tab, TabRippleProps };
